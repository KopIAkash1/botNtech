import telebot
import config
import utils.ticketsAPI as ticketsAPI
import time
import random
import urllib3
import utils.filesAPI as fileAPI
import utils.db as db

from datetime import datetime as dt
from threading import Thread
from telebot import types
from loguru import logger

callbacks = {
    'docs': ["doc_type: 1", "doc_type: 2", "doc_type: 3"],
    'manage_access': ["add", "remove", "remove_user"],
}

#–°–∏–ª—å–Ω—ã–π –∫–æ—Å—Ç—ã–ª—å –∫–æ–Ω–µ—à–Ω, –Ω–æ —è –Ω–µ –Ω–∞—à–µ–ª –≤ –¥–æ–∫–µ –∫–∞–∫ –º–Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ —Å—Ç–µ–ø —Ö–µ–Ω–¥–ª–µ—Ä—ã, –ø–æ—ç—Ç–æ–º—É –ø–æ–∫–∞ —Ç–∞–∫

cancel = types.InlineKeyboardButton("–û—Ç–º–µ–Ω—è", callback_data="cancel")

bot = telebot.TeleBot(config.api)
assignee_from_group = False
type_of_docs = 0
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

@bot.message_handler(commands=["pong"])
def assignee_time_message():
    current_user, next_user = ticketsAPI.read_schedule()
    msg = f'''üéâ–ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µüéâ\
    \n–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {current_user}\
    \n–°–ª–µ–¥—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {next_user}
    '''
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("–ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å", url="https://t.me/TicketTrackerNTECHbot?start=assignee")
    markup.add(button1)
    bot.send_message(chat_id=config.group_chat_pid, text=msg, reply_markup=markup, reply_to_message_id=172548)

@bot.message_handler(commands=["assignee"], func=lambda message: check_author_and_format(message))
def assigne_to_user(message):
    global assignee_from_group
    logger.info(f"Started assignee func by {message.from_user.username}")
    message.text = message.text.replace("start ","")    
    try: 
        print(len(str(message.text).split(" ")))
        current_user, next_user = ticketsAPI.read_schedule()
        print(f"Message get from @{message.from_user.username} and current_user by schedule is {current_user} and next user is {next_user}")
        if message.text == "/assignee":
            if f"@{message.from_user.username}" == config.user_tg[current_user] or f"@{message.from_user.username}" == config.user_tg[next_user]:
                if not(assignee_from_group):
                    name = ticketsAPI.assigne_to_next()
                    bot.send_message(message.chat.id, f"üñäÔ∏è–ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—èüñäÔ∏è\n–ù–∞–∑–Ω–∞—á–µ–Ω–æ: {name}")
                    assignee_from_group = True
                    logger.info(f"Assignee from {current_user} to {next_user}")
                else:
                    print(f"Already assigned")
            else:
                print("User are not allowed to assignee")
        elif len(message.text.split(" ")) == 2:
            next_user = message.text.split(" ")[1]
            name = ticketsAPI.assigne_to_next(next_user_param=next_user)
            bot.send_message(message.chat.id, f"üìé–ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èüìé\n–ù–∞–∑–Ω–∞—á–µ–Ω–æ:{name}")
        elif len(message.text.split(" ")) == 3:
            old_user = message.text.split(" ")[1]
            next_user = message.text.split(" ")[2]
            name = ticketsAPI.assigne_to_next(old_user_param=old_user, next_user_param=next_user)
            bot.send_message(message.chat.id, f"ü§ù–ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å –æ–¥–Ω–æ–≥–æ –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èü§ù\n–¢–∏–∫–µ—Ç—ã —Å {old_user}\n–ù–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∞ {next_user}")
    except Exception as e: print(F"WARNING | Get exception in message. Message: {message.text}\n{e}")

def is_tagging(message):
    return f'@{bot.get_me().username}' in message.text

def check_author_and_format(message):
    return message.from_user.username in config.users # and is_tagging(message)

@bot.message_handler(commands=['get_channel_id_for_chat'], func=lambda message: check_author_and_format(message))
def get_channel_id(message):
    bot.send_message(message.chat.id, f"ID —á–∞—Ç–∞: {message.chat.id}\nThread —á–∞—Ç–∞: {message.message_thread_id}",reply_to_message_id=message.message_id)

def schedule_message():
    message_sended = False
    while True:
        if (dt.now().hour == 6 + config.timezone or dt.now().hour == 18 + config.timezone) and message_sended != True:
            assignee_time_message()
            message_sended = True
        time.sleep(30)


@bot.message_handler(commands=["start"])
def start(message):
    if "assignee" in message.text:
        #assigne_to_user(message)
        pass #remove
    elif "spam" in message.text:
        logger.info("Sending spam request")
        ticket_id = message.text.split("_")[1]
        ticketsAPI.spam_ticket(ticket_id)
        bot.send_message(message.chat.id, f"–¢–∏–∫–µ—Ç {ticket_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Å–ø–∞–º")

@bot.message_handler(commands=["roulette"], func = lambda message: check_author_and_format(message))
def roulette(message):
    if "l1" in message.text:
        person = config.users[random.randrange(0,4)]
    else:
        person = config.users[random.randrange(5,len(config.users))]
    bot.send_message(message.chat.id, f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –ª–æ—Ç–µ—Ä–∏–∏üé∞\n@{person}!\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –∏/–∏–ª–∏ —Å–æ—á—É–≤—Å—Ç–≤—É–µ–ºü´°")

@bot.message_handler(commands=['tickets_count'], func= lambda message : check_author_and_format(message))
def get_tickets_count(message):
    logger.info(f"Get request for count tickets by {message.from_user.username}")
    current_user, _ = ticketsAPI.read_schedule()
    tickets = ticketsAPI.get_tickets(current_user)
    logger.info(f"Get {len(tickets)} tickets")
    bot.send_message(message.chat.id, f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞ –ø–µ—Ä–≤–æ–π –ª–∏–Ω–∏–∏ –≤—Å–µ–≥–æ {len(tickets)} —Ç–∏–∫–µ—Ç–æ–≤")

@bot.message_handler(commands=['docs'], func= lambda message: check_author_and_format(message))
def make_docs(message):
    params = message.text.split(" ")
    if len(params) == 1:
        markup = types.InlineKeyboardMarkup()
        markup1 = types.InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–º –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º —Ç–∞–±–ª–∏—á–Ω—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –ë–∞–∑ –¥–∞–Ω–Ω—ã—Ö", callback_data="doc_type: 3")
        markup2 = types.InlineKeyboardButton("–ö–æ–Ω—Ç—Ä–æ–ª—å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π (–í–∏–¥–µ–æ–¥–µ—Ç–µ–∫—Ç–æ—Ä)", callback_data="doc_type: 2")
        markup3 = types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", callback_data="doc_type: 1")
        markup.add(markup1,markup2,markup3,cancel)
        bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç—á–µ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", reply_markup=markup)

@bot.callback_query_handler(lambda call: call.data == "cancel")
def cancel_callback_handler(call):
    try:
        global user_to_manage
        user_to_manage = ""
        bot.clear_step_handler_by_chat_id(chat_id=call.message.chat.id)
        bot.answer_callback_query(call.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        bot.edit_message_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", chat_id=call.message.chat.id, message_id=call.message.message_id)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    except:
        pass #–Ω–µ–±–æ–ª—å—à–æ–π –ø–æ—Ö—É–π)

@bot.callback_query_handler(lambda call: call.data in callbacks['docs'])
def docs_callback_handler(call):
    try:
        bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –†–†", chat_id=call.message.chat.id, message_id=call.message.message_id)
        global type_of_docs 
        type_of_docs = call.data.split(": ")[1]
        bot.register_next_step_handler(call.message, fileAPI.make_docx_file, type_of_docs, bot)
        logger.info("Started making docx file func")
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"Making docs stoped with error {e}") 

@bot.callback_query_handler(lambda call: call.data in callbacks['manage_access'])
def manage_access_callback_handler(call):
    try:
        if call.data == "add":
            markup_second = types.InlineKeyboardMarkup()
            markup_second.add(cancel)
            bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ç—ã, –∫ –∫–æ—Ç–æ—Ä—ã–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø", call.message.chat.id, call.message.message_id)
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup_second)
            bot.register_next_step_handler(call.message, manage_access_to_view_ticket_add)
        #elif call.data == "remove":
        #    markup_second = types.InlineKeyboardMarkup()
        #    markup_second.add(cancel)
        #    bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ç—ã, –∫ –∫–æ—Ç–æ—Ä—ã–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø", call.message.chat.id, call.message.message_id)
        #    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup_second)
        #    bot.register_next_step_handler(call.message, manage_access_to_view_ticket_rem)
    except Exception as e:
        logger.error(f"Something gone wrong with error {e}")
 
@bot.message_handler(commands=["manage_access"], func=lambda message: check_author_and_format(message))
def manage_access_to_view_ticket(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(cancel)
    bot.send_message(message.chat.id, text="–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º", reply_markup=markup)
    bot.register_next_step_handler(message, manage_access_to_view_ticket_follow_up)

def manage_access_to_view_ticket_follow_up(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(cancel)
    if len(message.text.strip().split(" ")) > 1:
        bot.send_message(message.chat.id, text="–£–∫–∞–∂–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",reply_markup=markup)
        bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
        bot.register_next_step_handler(message, manage_access_to_view_ticket_follow_up)
    else:
        if message.text.startswith("@"): message.text = message.text[1:]
        global user_to_manage
        user_to_manage = message.text.lower()
        markup = types.InlineKeyboardMarkup()
        markup_but1 = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–∏–∫–µ—Ç—É", callback_data="add")
        markup_but2 = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–∏–∫–µ—Ç—É", callback_data="remove")
        markup.row(markup_but1, markup_but2)
        markup.row(cancel)
        bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é", reply_markup=markup)
#TODO: –í—ã–Ω–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –∏ —Ç–∞–º —Å–¥–µ–ª–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–π –∫–æ–¥
def manage_access_to_view_ticket_add(message):
    global user_to_manage
    tickets = message.text.strip().split(" ")
    error = []
    goods = []
    for ticket in tickets:
        ticket.strip()
        if not ticket.upper().startswith("SUP-"): error.append(ticket)
        elif len(ticket) != 9: error.append(ticket)
        else: goods.append(ticket.upper())
    error = [err for err in error if err.strip()]
    goods = [good for good in goods if good.strip()]
    result = ""
    try: db.set_tickets_to_user(user_to_manage, " ".join(goods))
    except Exception as e:
        user_to_manage 
        logger.error(e)
    user_to_manage = ""
    if len(error) > 0:
        result += "*–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∏–∫–µ—Ç–æ–≤*: \n" + ", ".join(error) + "\n\n"
    if len(goods) > 0: result += "*–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã*: \n" + ", ".join(goods)
    bot.send_message(message.chat.id, parse_mode="Markdown", text=result)

#TODO: –¢–æ—Ç –∂–µ —Å–∞–º—ã–π –∫–æ–º–º–µ–Ω—Ç —á—Ç–æ –∏ –≤—ã—à–µ, –≤—ã–Ω–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –∏ —Å–¥–µ–ª–∞—Ç—å –∫—Ä–∞—Å–∏–≤–µ–µ
#TODO: –î–æ–¥–µ–ª–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤ –≤ –±–∞–∑–µ, –Ω–∞—á–∞—Ç—å –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å —Ç–∏–∫–µ—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É, —Ä–∞—Å—Å–∫–æ–º–µ–Ω—Ç–∏—Ç—å —Ö–µ–Ω–¥–ª–µ—Ä –Ω–∞ rem
#def manage_access_to_view_ticket_rem(message):
#    print(manage_context)
#    tickets = message.text.strip().split(" ")
#    error = []
#    goods = []
#    for ticket in tickets:
#        ticket.strip()
#        if not ticket.upper().startswith("SUP-"): error.append(ticket)
#        elif len(ticket) != 9: error.append(ticket)
#        else: goods.append(ticket.upper())
#    error = [err for err in error if err.strip()]
#    goods = [good for good in goods if good.strip()]
#    result = ""
#    #try: db.set_tickets_to_user(user, " ".join(goods))
#    #except Exception as e: 
#    #    logger.error(e)
#    if len(error) > 0:
#        result += "*–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∏–∫–µ—Ç–æ–≤*: \n" + ", ".join(error) + "\n\n"
#    if len(goods) > 0: result += "*–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã*: \n" + ", ".join(goods)
#    bot.send_message(message.chat.id, parse_mode="Markdown", text=result)

if __name__ == "__main__":
    logger.info(f"Bot started {bot.get_my_name()}")
    schedule_thread = Thread(target=schedule_message)
    schedule_thread.start()
    bot.polling()
